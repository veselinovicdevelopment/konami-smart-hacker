import Head from "next/head";
import { useEffect, useState } from "react";

import { useKonamiCode } from "../utils/hooks/useKonamiCode";

interface Issue {
  title: string;
  number: number;
  html_url: string;
  comments: number;
  state: string;
  updated_at: string;
  user: {
    login: string;
  };
}

export default function Home() {
  const [issues, setIssues] = useState<Issue[]>([]);
  const success = useKonamiCode();

  const [showIlocxWidget, setShowIlocxWidget] = useState(false);

  useEffect(() => {
    if (success) {
      fetch("https://api.github.com/repos/elixir-lang/elixir/issues")
        .then((res) => res.json())
        .then((data) => {
          setIssues(data.slice(0, 5));
        });
    } else {
      setIssues([]);
    }
  }, [success]);

  return (
    <div className="container">
      <Head>
        <title>Mike test - Konami smart hacker</title>
        <meta
          name="description"
          content="Generated by create next app by Mike"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="header">
        <h1 className="title mb-2">Sweet kittens</h1>
        <h5 className="font-medium text-center">
          Please type <span className="text-red-400">injects3crets</span> to see
          what happen
        </h5>
      </header>

      <main className="main min-h-screen">
        {issues.length > 0 && (
          <div className="issues-wrapper">
            {issues.map((issue, index) => (
              <IssueItem issue={issue} key={index} />
            ))}
          </div>
        )}
        <div
          className={`ilocx-widget-container ${
            showIlocxWidget ? "active" : ""
          }`}
        >
          <div className="fixed z-50 ilocx-widget-wrapper">
            <iframe
              src="https://ilocx-widget.vercel.app"
              allowFullScreen
            ></iframe>
          </div>
          <div
            className="ilocx-widget-launcher"
            onClick={() => setShowIlocxWidget(!showIlocxWidget)}
          >
            <svg
              className="default-icon"
              focusable="false"
              viewBox="0 0 28 32"
              width="24"
              height="24"
            >
              <path
                fill="white"
                d="M28,32 C28,32 23.2863266,30.1450667 19.4727818,28.6592 L3.43749107,28.6592 C1.53921989,28.6592 0,27.0272 0,25.0144 L0,3.6448 C0,1.632 1.53921989,0 3.43749107,0 L24.5615088,0 C26.45978,0 27.9989999,1.632 27.9989999,3.6448 L27.9989999,22.0490667 L28,22.0490667 L28,32 Z M23.8614088,20.0181333 C23.5309223,19.6105242 22.9540812,19.5633836 22.5692242,19.9125333 C22.5392199,19.9392 19.5537934,22.5941333 13.9989999,22.5941333 C8.51321617,22.5941333 5.48178311,19.9584 5.4277754,19.9104 C5.04295119,19.5629428 4.46760991,19.6105095 4.13759108,20.0170667 C3.97913051,20.2124916 3.9004494,20.4673395 3.91904357,20.7249415 C3.93763774,20.9825435 4.05196575,21.2215447 4.23660523,21.3888 C4.37862552,21.5168 7.77411059,24.5386667 13.9989999,24.5386667 C20.2248893,24.5386667 23.6203743,21.5168 23.7623946,21.3888 C23.9467342,21.2215726 24.0608642,20.9827905 24.0794539,20.7254507 C24.0980436,20.4681109 24.0195551,20.2135019 23.8614088,20.0181333 Z"
              ></path>
            </svg>
            <svg
              className="active-icon"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M18.601 8.39897C18.269 8.06702 17.7309 8.06702 17.3989 8.39897L12 13.7979L6.60099 8.39897C6.26904 8.06702 5.73086 8.06702 5.39891 8.39897C5.06696 8.73091 5.06696 9.2691 5.39891 9.60105L11.3989 15.601C11.7309 15.933 12.269 15.933 12.601 15.601L18.601 9.60105C18.9329 9.2691 18.9329 8.73091 18.601 8.39897Z"
                fill="white"
              ></path>
            </svg>
          </div>
        </div>
      </main>
    </div>
  );
}

interface IssueItemProps {
  issue: Issue;
}

const IssueItem = ({ issue }: IssueItemProps) => {
  const months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];
  const d = new Date(issue.updated_at).getDate();
  const m = months[new Date(issue.updated_at).getMonth()];

  return (
    <div className="issue">
      <div className="issue-left">
        <h4 className="issue-title">
          <a href={issue.html_url}>{issue.title}</a>
        </h4>
        <p className="issue-desc">
          # {issue.number} {issue.state} on {m} {d} by {issue.user.login}
        </p>
      </div>
      <div className="issue-right">
        <a href={issue.html_url}>
          <svg
            aria-hidden="true"
            height="16"
            viewBox="0 0 16 16"
            version="1.1"
            width="16"
          >
            <path
              fillRule="evenodd"
              d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"
            ></path>
          </svg>
          <span className="text-small text-bold">{issue.comments}</span>
        </a>
      </div>
    </div>
  );
};
